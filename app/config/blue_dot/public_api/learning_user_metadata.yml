configuration:

    sql_import: imports/learning_user_metadata.yml

    simple:
        select:
            get_words_count:
                sql: "SELECT id AS id FROM words WHERE language_id = :language_id AND level = :word_level"
                parameters: [language_id, word_level]
            get_words_count_with_lesson_excluded:
                sql: "SELECT id AS id FROM words WHERE language_id = :language_id AND (lesson_id != :lesson_id OR lesson_id IS NULL) AND level = :word_level"
                parameters: [language_id, lesson_id, word_level]
            get_lesson_ids:
                sql: "SELECT l.id FROM lessons AS l INNER JOIN courses AS c ON c.id = l.course_id AND c.language_id = :language_id"
                parameters: [language_id]
                filter:
                    by_column: id

        update:
            update_learning_lesson:
                sql: "UPDATE learning_lessons SET learning_metadata_id = :learning_metadata_id WHERE id = :learning_lesson_id"
                parameters: [learning_metadata_id, learning_lesson_id]

    scenario:
        create_learning_metadata:
            atomic: true
            statements:
                create_data_collector:
                    sql: "INSERT INTO data_collector (has_completed, time_spent, accessed_count, completed_count, un_completed_count) VALUES (0, 0, 0, 0, 0)"
                create_learning_lesson:
                    sql: "INSERT INTO learning_lessons (data_collector_id, lesson_id, learning_metadata_id, has_completed) VALUES (:data_collector_id, :lesson_id, NULL, 0)"
                    foreign_key:
                        statement_name: create_data_collector
                        bind_to: data_collector_id
                    parameters: [lesson_id]
                create_learning_metadata:
                    sql: "INSERT INTO learning_metadata (lesson_data_collector_id, learning_user_id) VALUES(:data_collector_id, :learning_user_id)"
                    foreign_key:
                        statement_name: create_data_collector
                        bind_to: data_collector_id
                    parameters: [learning_user_id]

        initial_data_collection:
            atomic: true
            statements:
                find_learning_lesson:
                    sql: "SELECT ll.lesson_id AS lesson_id FROM learning_lessons AS ll INNER JOIN learning_metadata AS lm ON lm.learning_user_id = :learning_user_id AND lm.id = ll.learning_metadata_id WHERE ll.learning_metadata_id = :learning_metadata_id"
                    parameters: [learning_user_id, learning_metadata_id]
                find_learning_lesson_words:
                    sql: "SELECT w.id, w.level FROM words AS w WHERE w.language_id = :language_id AND w.level = :word_level AND w.lesson_id = :lesson_id"
                    parameters: [language_id, word_level]
                    use:
                        statement_name: find_learning_lesson
                        values: { find_learning_lesson.lesson_id: lesson_id }

    service:
        create_learning_metadata:
            class: PublicApi\LearningSystem\Infrastructure\BlueDot\BlueDotCallable\CreateLearningMetadataService