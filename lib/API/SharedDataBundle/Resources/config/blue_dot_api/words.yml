configuration:

    sql_import: imports/words.yml

    simple:
        select:
            find_single_word_translation:
                sql: "SELECT w.id, w.word, w.type FROM words AS w WHERE language_id = :language_id AND word = :search_word ORDER BY id ASC LIMIT 12 OFFSET :offset"
                parameters: [language_id, search_word, offset]
            find_word_by_pattern:
                sql: "SELECT w.id, w.word, w.type FROM words AS w WHERE language_id = :language_id AND word LIKE :search_word ORDER BY w.id ASC LIMIT 12 OFFSET :offset"
                parameters: [language_id, search_word, offset]
            find_translations_by_word:
                sql: "SELECT translation FROM translations WHERE word_id = :word_id"
                parameters: [word_id]
            find_last_words:
                sql: find_last_words
                parameters: [language_id, offset]
            find_translation_by_word:
                sql: "SELECT * FROM translations WHERE word_id = :word_id"
                parameters: [word_id]
            find_translations_by_word_id:
                sql: "This sql is injected"
            find_word_by_word:
                sql: find_word_by_word
                parameters: [word]
            find_word_by_id:
                sql: find_word_by_id
                parameters: [word_id]
            find_image_by_word:
                sql: find_image_by_word
                parameters: [word_id]
            find_word_image_by_filename:
                sql: "SELECT id FROM word_images WHERE file_name = :file_name"
                parameters: [file_name]

        update:
            schedule_word_removal:
                sql: "UPDATE words SET schedule_removal = 1 WHERE id = :word_id"
                parameters: [word_id]

    scenario:
        insert_word:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                insert_word:
                    sql: scenario.insert_word
                    parameters: [language_id, word, type]
                insert_translation:
                    sql: scenario.insert_translation
                    parameters: [translation]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
                insert_word_category:
                    sql: scenario.insert_word_category
                    parameters: [category_id]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
                insert_word_image:
                    sql: scenario.insert_word_image
                    parameters: [relative_path, absolute_path, file_name, absolute_full_path, relative_full_path]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
        remove_word:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                remove_translations:
                    sql: "DELETE t FROM translations AS t INNER JOIN words AS w WHERE t.word_id = :word_id AND t.word_id = w.id AND w.schedule_removal = 1"
                    parameters: [word_id]
                remove_word_category:
                    sql: "DELETE wc FROM word_category AS wc INNER JOIN words AS w WHERE wc.word_id = :word_id AND w.id = wc.word_id AND w.schedule_removal = 1"
                    can_be_empty_result: true
                    parameters: [word_id]
                remove_word_image:
                    sql: "DELETE wi FROM word_images AS wi INNER JOIN words AS w WHERE wi.word_id = :word_id AND w.id = wi.word_id AND w.schedule_removal = 1"
                    can_be_empty_result: true
                    parameters: [word_id]
                remove_word:
                    sql: "DELETE FROM words WHERE id = :word_id AND schedule_removal = 1"
                    parameters: [word_id]

    callable:
        last_words:
            type: object
            name: AdminBundle\BlueDotCallable\LastWordsCallable
        search_callable:
            type: object
            name: AdminBundle\BlueDotCallable\SearchCallable