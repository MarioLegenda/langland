<?php

namespace ApiSDK;

use TestLibrary\ContainerAwareTest;

class ApiSDKTest extends ContainerAwareTest
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @expectedException \RuntimeException
     */
    public function test_create_called_first()
    {
        $apiSdk = $this->container->get('library.api_sdk');

        $apiSdk
            ->setStatusCode(200);
    }
    /**
     * @expectedException \RuntimeException
     */
    public function test_type_not_determined()
    {
        $apiSdk = $this->container->get('library.api_sdk');
        $items = $this->generateSingleResource();

        $apiSdk
            ->create($items)
            ->setStatusCode(200)
            ->build();
    }
    /**
     * @expectedException \RuntimeException
     */
    public function test_single_type()
    {
        $apiSdk = $this->container->get('library.api_sdk');
        $items = $this->generateSingleResource();

        $apiSdk
            ->create($items)
            ->isCollection()
            ->isResource()
            ->setStatusCode(200)
            ->build();
    }

    public function test_single_resource_api_sdk()
    {
        $apiSdk = $this->container->get('library.api_sdk');
        $items = $this->generateSingleResource();

        $response = $apiSdk
            ->create($items)
            ->setStatusCode(200)
            ->isResource()
            ->method('GET')
            ->build();

        $this->assertMandatoryData($response, 'resource', 200);

        $resource = $response['resource'];

        static::assertArrayHasKey('data', $resource);
        static::assertNotEmpty($resource['data']);

        $data = $resource['data'];

        foreach ($data as $key => $item) {
            static::assertArrayHasKey($key, $items);
            static::assertEquals($item, $items[$key]);
        }
    }

    public function test_collection_api_sdk()
    {
        $apiSdk = $this->container->get('library.api_sdk');
        $items = $this->generateCollectionResponse();

        $response = $apiSdk
            ->create($items)
            ->setStatusCode(200)
            ->isCollection()
            ->method('GET')
            ->build();

        $this->assertMandatoryData($response, 'collection', 200);

        $collection = $response['collection'];

        static::assertArrayHasKey('totalItems', $collection);
        static::assertEquals(count($items), $collection['totalItems']);

        static::assertArrayHasKey('data', $collection);
        static::assertNotEmpty($collection['data']);

        $data = $collection['data'];

        static::assertNotEmpty($data);
        static::assertEquals(count($data), count($items));
    }
    /**
     * @param array $response
     * @param string $type
     * @param int $statusCode
     */
    private function assertMandatoryData(array $response, string $type, int $statusCode)
    {
        static::assertNotEmpty($response);

        static::assertArrayHasKey('properties', $response);
        static::assertNotEmpty($response['properties']);

        static::assertArrayHasKey('method', $response);
        static::assertEquals('GET', $response['method']);

        static::assertArrayHasKey('type', $response);
        static::assertEquals($type, $response['type']);

        static::assertArrayHasKey($type, $response);
        static::assertNotEmpty($response[$type]);

        static::assertArrayHasKey('statusCode', $response);
        static::assertInternalType('int', $response['statusCode']);
        static::assertEquals($statusCode, $response['statusCode']);
    }
    /**
     * @param int $collectionNum
     * @return array
     */
    private function generateCollectionResponse(int $collectionNum = 5): array
    {
        $collection = [];
        for ($i = 0; $i < $collectionNum; $i++) {
            $collection[] = $this->generateSingleResource();
        }

        return $collection;
    }
    /**
     * @return array
     */
    private function generateSingleResource(): array
    {
        return [
            'name' => $this->faker->name,
            'lastname' => $this->faker->lastName,
            'email' => $this->faker->email,
            'age' => $this->faker->numberBetween(18, 65),
            'gender' => 'male',
        ];
    }
}